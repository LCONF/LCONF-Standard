{
    "docs": [
        {
            "location": "/",
            "text": "Welcome to LCONF-Standard\n\n\nThe official LCONF data serialization format Standard. \n\n\nFor official documentation visit \nThe \nLCONF-Standard\n web site\n.",
            "title": "Home"
        },
        {
            "location": "/#welcome-to-lconf-standard",
            "text": "The official LCONF data serialization format Standard.   For official documentation visit  The  LCONF-Standard  web site .",
            "title": "Welcome to LCONF-Standard"
        },
        {
            "location": "/LCONF-Standard/",
            "text": "The Official LCONF-Standard\n\n\nUnfinished Version 8 (20150808)\n\n\n\n\nThe source of the documentation was rewritten in markdown format.\n\n\nIn the documentation \nKey-Value-Mappings\n are renamed to \nSingle-Blocks\n.\n\n\nBreaking changes:\n\n\nThe \nLCONF-Section\n indentation level was previously exact 3 spaces per level. This new version of the\n    LCONF-Standard allows that LCONF-Section specify there own number of spaces used per indentation level.\n    For this reason the LCONF-Section start line format changed adding the indentation space number used for the\n    section.\n\n\nKey :: Value-Lists\n: leading or ending whitespace of comma separated values are now required to be stripped.\n\n\n\n\n\n\n\n\nCopyrights \n Licenses\n\n\nThe \nLCONF-Standard documentation\n and associated documentation files\n(the \"DOCUMENTATION\") is licensed under the following terms:\n\n\n\n\nCopyright (c) 2014, 2015: \npeter1000\n  \nhttps://github.com/peter1000\n.\n\nAll rights reserved.\n\n\nThe DOCUMENTATION may be freely copied, published and distributed to\nothers, provided that the above copyright notice and this Copyright\nLicense are included on all such copies or substantial portions of the\nDOCUMENTATION.\n\n\nHowever, the content of this DOCUMENTATION itself may not be modified\nin any way, including by removing the copyright notice, except as\nrequired to translate it into languages other than English or into a\ndifferent format.\nIn the event of discrepancies between a translated version and the\nofficial English version, the official English version shall govern.\n\n\nTHIS DOCUMENTATION AND THE INFORMATION CONTAINED HEREIN IS PROVIDED\n\"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\nBUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\nOR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE DOCUMENTATION OR THE\nUSE OF THE INFORMATION HEREIN.\n\n\n\n\n1. Introduction\n\n\nLCONF\n The light and simple readable data serialization format for dynamic configurations and data exchange.\n\n\nIt is a data serialization format designed \nwith special emphasis on being human-friendly\n and works well with many\nmodern programming languages. This is a complete specification of the information needed to develop applications for\nprocessing LCONF.\n\n\nLCONF was specifically designed to be useful to people working with program configuration and configuration files as\nwell as for other common use cases such as: data exchange, interprocess messaging, log files, cross-language data\nsharing. \n\n\nIt uses \nUnicode printable characters\n, containing the data itself and \nIndentation\n to provide structure in\ncombination with very few \nAscii characters\n which provide structural information.\nThis excellent combination allows the data to show itself in a human-friendly, easily readable format.\n\n\n1.1. Design Goals\n\n\nThe design goals for LCONF are, in no priority:\n\n\n\n\nLCONF is easily writeable and readable by humans.\n\n\nLCONF has minmal but strict structure.\n\n\nLCONF allows optional \nComment lines\n which are not part of the actual data.\n\n\nLCONF was designed from the start to expect a predefined known structure with implemented default data.\n\n\n\n\n1.2. Relation to other data serialization formats\n\n\nLCONF builds upon some concepts from \nJSON\n, \nRSON\n,\n\nRSONLITE\n, \nINI\n, and\n\nYAML\n but has also a few destinct features.\n\n\nIn many situations \nLCONF\n is a suitable replacement for any of the others mentioned above.\n\n\n1.3. Design Overview\n\n\nDEFAULT VALUES\n\n\nA major difference in design to many other data serialization formats is that LCONF was designed from the start to\nexpect a predefined known structure with implemented default data.\n\n\nMany programs which parse human written data input have to account that some parts of the input may be optional and\nprovide some means of checking for such and in some cases default values must be set.\n\n\nLCONF takes this as the base of its design\n and \nrequires\n a parser/emitter to implement for any LCONF-Section a\ncomplete structure with default values. (\nLCONF-Default-Template-Structure\n)\n\n\nLCONF parsed data only overwrite the defaults.\n\n\nREADABILITY\n\n\nTo help to be easily writeable and readable by humans LCONF supports:\n\n\n\n\nNamed-Sections: which helps to identify separate parts.\n\n\nEmpty Lines: which are skipped but help to maintain readability.\n\n\nDefault Comment Lines: which are not part of the data but can be optional emitted.\n\n\nIndentation: is used to visualize some of the structure od a LCONF-Document.\n\n\n\n\nNAMED-SECTIONS\n\n\nNamed-Sections allow for extended text/info/explanations before or after a \nLCONF-Section\n without the need of\nComment-TAGS.\n\n\nMultiple LCONF-Sections can be within one \nLCONF-Document\n.\n\n\nTWO STRUCTURES WHICH HOLD DATA\n\n\n\n\nKey :: Value Pairs\n: Associates a key with a data value.\n\n\n\n\nLists\n: there are three sub types of lists:\n\n\n\n\nKey :: Value-Lists\n: \nsingle-line\n lists which associates a key with a list of data values.\n\n\nKey-Value-Lists\n: \nmulti-line\n lists which associates a key with a list of data values.\n\n\nList-Of-Tuples\n: \nmulti-line\n lists which associates a key with Column-Names to a list of column data values.\n  This lends itself especially well to data similar to multi-dimensional lists or tables e.g. csv data.\n\n\n\n\n\n\n\n\nTWO COLLECTION STRUCTURES\n\n\n\n\nSingle-Blocks\n: are a collections of any of the four main structure types. (Key :: Value Pairs, Lists, Single-Blocks\n    and Repeated-Blocks)\n\n\nRepeated-Blocks\n: are similar to Single-Blocks but additionally allow the configuration of multiple such blocks\n    within a LCONF-Section.\n\n\n\n\nORDER\n\n\nLCONF-Structure is ordered so that emitting of the same LCONF-Document will result always in an identical\nrepresentation. The order is based on the implemented \nLCONF-Default-Template-Structure\n.\n\n\n2. LCONF-Standard Specification\n\n\n2.1 Key-Value-Separator\n\n\n\" :: \"\n\n\n(\none space, double colons, one space\n) is used as a \nKey-Value-Separator\n.\n\n\n2.2 Trailing Spaces\n\n\nLCONF does not allow any \nTrailing Space\n within a LCONF-Section.\n\n\n2.3 LCONF's Native Data Type\n\n\nUnlik JSON's basic types which are: strings, numbers, booleans, object, arrays, and null\nLCONF\n has only one native\ntype: \nstrings\n.\n\n\nString values are never quoted or escaped.\n\n\nSee also later the part of: Value Transformation.\n\n\n2.4 Indentation\n\n\nLCONF allows only spaces to be used as indentation. The number of spaces used per indentation level is set within\nthe LCONF-Section opening line.\n\n\nThe example below would specify that 4 spaces are used per intentation level within the LCONF-Section named \nExample\n\n\n___SECTION :: 4 :: Example\n___END\n\n\n\n\n2.5 Named-Sections\n\n\nLCONF-Documents can contain multiple named LCONF-Sections. A LCONF-Section has a clear defined Start-TAGS and End-TAGS.\nEverything outside of these is considered \nadditional text\n.\n\n\nWARNING:\n LCONF-Section Start/End TAGS are forbidden in any form except for the defined purpose.\n\n\nSection Start TAG\n\n\n\"___SECTION\"\n\n\n(\nthree underlines, capital SECTION\n)\n\n\nThis is followed by a \nKey-Value-Separator\n and the number of spaces used per indentation level followed\nby a second \nKey-Value-Separator\n and the section name.\n\n\nThe \nLCONF-Section-Start-TAG\n must always be without any indentation.\n\n\n___SECTION :: 4 :: the name can also contain spaces or unicode\n\n\n\n\nSection End TAG\n\n\n\"___END\"\n\n\n(\nthree underlines, capital END\n)\n\n\nThe \nLCONF-Section-End-TAG\n must always be without any indentation.\n\n\nThe most basic valid LCONF-Section is:\n\n\n___SECTION :: 4 :: Example\n___END\n\n\n\n\n2.6 Comment-Lines\n\n\n\"#\"\n\n\n(\none number sign\n) is used as \nComment-Line-Identifier\n.\n\n\nIf the first none white character in a LCONF-Section line is \n#\n the line is considered a Comment-Line.\n\n\nComment-Lines \nmust\n have the indentation level of the following line (disregarding empty lines).\nComment-Lines within a LCONF-Section are always skipped when the \nLCONF-Section\n is parsed.\n\n\n___SECTION :: 4 :: Example\n# Comment-Line more info\n- Names\n    Tim\n    Sandra\n    # Comment-Line must have the indentation level of the following line\n    Max\n    Frank\n___END\n\n\n\n\nNOTE:\n Default \nComment-Lines and Default-Empty-Lines\n which are implemented in the\n\nLCONF-Default-Template-Structure\n can be optionally emitted.\n\n\n2.7 Two Structures Which Hold Data\n\n\nKey :: Value Pairs\n\n\n\"Key-Name :: Value\"\n\n\n(\none space, double colons, one space\n) is used as a \nKey-Value-Separator\n.\n\n\nException:\n for \nEmpty Values\n the last space is skipped so that there is no trailing space.\n\n\n___SECTION :: 4 :: Example\nColor :: Blue\nFONT :: Liberation Mono\n# Comment below is an Empty Value with no trailing space.\nMyEmptyKeyValuePair ::\n___END\n\n\n\n\nKey :: Value Pairs\n are always \nsingle-line\n items where the value is everything after the \nKey-Value-Separator\n\n which and is always interpreted as a \nsingle string\n.\n\n\nLists:\n\n\n\"- \"\n\n\n(\nminus, one space\n) is used as \nList-Identifier\n for all \nthree sub types of lists\n: \n\"- List-Identifier Name\"\n\n\nExample of all tree LCONF-List types.\n\n\n___SECTION :: 4 :: SectionName\n\n# Key :: Value-List: a single-line list\n- Names :: Tim,Sandra,Max\n\n# Key-Value-List: a multi-line list with indentation\n- Names\n    Tim\n    Sandra\n    Max\n\n# List-Of-Tuples: a multi-line list with indentation\n- Colors RGB |Color Name|Red|Green|Blue|\n    forestgreen,          34,  139,  34\n    brick,               156,  102,  31\n___END\n\n\n\n\nKey :: Value-Lists\n\n\nThese are ordered collections of items: a \nsingle-line\n list which associates a key with a list of data values which\nare separated by comma.\n\n\nUses a \nList-Identifier\n with a List-Name followed by a \nKey-Value-Separator\n and the values are separated by\n\n\",\"\n (\ncomma\n).\n\n\nIMPORTAND: leading or ending whitespace of comma separated values are stripped when a LCONF-Section is parsed.\n\n\nEach List-Item is always interpreted as a \nsingle string\n. This implies that List-Items can not be any of the four main\nstructure types. (Key :: Value Pairs, Lists, Single-Blocks and Repeated-Blocks)\n\n\nException:\n for \nEmpty Key :: Value-Lists\n the last space is skipped so that there is no trailing space.\n\n\n___SECTION :: 4 :: Example\n- Colors :: Black,White,Blue,Red,Green\n# Comment below is an empty Empty Key :: Value-List with no trailing space.\n- MyEmptyList ::\n___END\n\n\n\n\nKey-Value-Lists\n\n\nThese are ordered collections of items: a \nmulti-line list\n which associates a key with a list of data values.\nValues are written on separate lines (List-Items) and use one indentation level based on the List-Identifier line.\n\n\nBasically the same as \nKey :: Value-List\n just uses a different notation for readability and is mostly useful for\nlonger lists or when the items are long e.g. whole sentences.\n\n\nUses a \nList-Identifier\n with a List-Name and any value is places on a new line with indentation.\n\n\nEach List-Item is always interpreted as a \nsingle string\n. This implies that List-Items can not be any of the four main\nstructure types. (Key :: Value Pairs, Lists, Single-Blocks and Repeated-Blocks)\n\n\nException:\n for \nEmpty Key-Value-Lists\n there is no new value line.\n\n\n___SECTION :: 4 :: Example\n- Names\n    Tim\n    Sandra\n    Max\n    Frank\n# Comment below is an empty Empty Key-Value-Lists.\n- MyEmptyList\n___END\n\n\n\n\nTIP: eventhough lists of lists are not supported one could mimice such by using for example a LCONF Key-Value-List\nand have as value comma separated lines which are later further proccessed.\n\n\n___SECTION :: 4 :: SectionName\n- Numers\n    534,45\n    0,1,2,3\n    66\n    12,4568,1,3,99,465,12\n___END\n\n\n\n\nThe List-Item: \n534,45\n or \n0,1,2,3\n etc. are just normal string lines (item lines of an: \nKey-Value-List\n)\ne.g. one could use later a transformation function splitting each value line by comma.\n\n\nNOTE: many of such caes might be better solved by using a List-Of-Tuples.\n\n\nList-Of-Tuples\n\n\nThese are ordered collections of items: a \nmulti-line\n list which associates a key with multiple Column-Names to a\nlist of multiple column data values. This lends itself especially well to data similar to multi-dimensional lists or\ntables e.g. csv data.\n\n\nUses a \nList-Identifier\n with a List-Name followed by \none space\n and \nunique Column-Names\n which are embraced and\nseparated by \n\"|\"\n \npipe sign (vertical bar)\n.\n\n\nList-Of-Tuples items value lines are written on separate lines (List-Items - rows) and use one indentation level\nbased on the List-Identifier lin. Each lines values are separated by \n\",\"\n \ncomma\n.\n\n\nIMPORTANT: spaces around Column-Names and values are stripped which helps to write proper columns.\n\n\nException:\n for \nEmpty List-Of-Tuples\n there is no new value line but the Column-Names are still required.\n\n\n___SECTION :: SectionName\n# Comment: List-Name is \nColors RGB\n\n#          Columns are: \nColor Name\n, \nRed\n, \nGreen\n, \nBlue\n\n- Colors RGB |Color Name| Red| Green| Blue|\n    forestgreen,           34,   139,   34\n    brick,                156,   102,   31\n# Comment: below is an empty Empty List-Of-Tuples:\n#          List-Name is \nMyEmptyListOfTuples\n\n#          Columns are: \nX\n, \nY\n, \nZ\n\n - MyEmptyListOfTuples |X|Y|Z|\n ___END\n\n\n\n\nList-Of-Tuples can have empty (missing) values: \nEmpty/Missing Values\n are returned as empty strings or if defined per\nColumn-Replacement-Values. Any \nReplacement-Values\n must be implemented in the \nLCONF-Default-Template-Structure\n.\n\n\nExample of a LCONF-List-Of-Tuples with \nEmpty/Missing Values\n which will be returned as empty strings or with a\ndefined per column \nReplacement-Value\n.\n\n\n___SECTION :: SectionName\n- ExcelTable |X|Y|Z|\n    # COMMENT: the 2. item is empty or missing\n    value1,       , value3\n    value1, value2, value3\n    # COMMENT: all items are empty or missing: the indentation level must be kept\n    ,             ,\n    # COMMENT: spaces are not important\n    ,,\n___END\n\n\n\n\n2.8 Two Collection Structures\n\n\nSingle-Blocks\n\n\n\". \"\n\n\n(\ndot, one space\n)  is used as \nSingle-Block-Identifier\n: \n\". Single-Block-Identifier Name\"\n\n\nThese are a collections of any of the four main structure types. (Key :: Value Pairs, Lists, Single and\nRepeated-Blocks)\n\n\nSingle-Block items use \none\n additional indentation level.\n\n\nAn \nEmpty Single-Block-Identifier\n line is permitted which will use all default values as implemented by a\n\nLCONF-Template-Default-Structure\n. It is basically the same as if one does not define it at all.\n\n\nIn some cases this might be useful: e.g. if one wants previous comment lines.\n\n\n___SECTION :: SectionName\n. Single-Block whatever name\n    single_block_item1_key :: single_block_item1_value\n    - single_block_item2_key list\n        my List-Item 1\n    # Comment: Blocks can also have other (nested) Blocks\n    . inner_single_block_item3_key\n        inner_single_block_item1_key :: inner_single_block_item1_value\n# Comment: below a permitted empty `Single-Block-Identifier` which will use all default values\n. Single-Block 2\n___END\n\n\n\n\nRepeated-Blocks\n\n\n\"* \"\n\n\nasterisk, one space\n is used as \nRepeated-Block-Identifier\n: \n\"* Repeated-Block-Identifier Name\"\n\n\nThese are similar to the Single-Blocks but additionally allow the configuration of multiple such blocks within a\nLCONF-Section.\n\n\nA unique \nBlock-Name\n which uses \none\n additional indentation level defines a new Block and is written on a separate\nline.\n\n\nBlock-Name items use \nanother\n additional indentation level.\n\n\nAn \nEmpty Repeated-Block-Identifier\n line is permitted but without a \nBlock-Name\n it does nothing.\nIt is basically the same as if one does not define it at all.\n\n\nIn some cases this might be useful: e.g. if one wants previous comment lines.\n\n\n___SECTION :: SectionName\n* Color_BLK_Identifier\n    Sky Blue_Blk-Name Theme\n        blk_item_red :: 135\n        blk_item_green :: 206\n        blk_item_blue :: 235\n    # Second Block-Name is an empty Block which uses all default values\n    Red Theme\n# Comment: below a permitted empty `Repeated-Block-Identifier` line which will do nothing because\n# for Repeated-Blocks the main Structure item is a unique Block-Name.\n* Color_BLK_Identifier 2\n___END\n\n\n\n\nNOTE: to get the \nDefault-Values\n for a whole Block: only define the Block-Identifier and the Block-Name without any\nitems.\n\n\nBlock-Names\n\n\nEach Block of a \nRepeated-Block-Structure\n is named: \nBlock-Names\n use \none\n additional indentation level based on\nthe \nRepeated-Block-Identifier\n line.\n\n\nEmpty Block-Names\n: if a \nBlock-Name\n is defined without any items at all it is still valid using all defaults for\nsuch Block from the \nLCONF-Template-Default-Structure\n.\n\n\nAny number of Block-Names can be user defined: but this can also be limited in a \nLCONF-Template-Default-Structure\n.\n(NUMBER_MIN_REQUIRED_BLOCKS, NUMBER_MAX_ALLOWED_BLOCKS)\n\n\n3. LCONF Character Restrictions\n\n\nRestriction: Section Start/End Tag\n\n\nCharacter combinations \n___SECTION\n, \n___END\n are forbidden in any form except for the defined purpose.\nEach LCONF-Section Start-TAG must be closed by an corresponding LCONF-Section End-TAG.\n\n\nLCONF does not allow nested Sections.\n\n\nRestriction: Trailing Spaces\n\n\nLCONF does not allow any Trailing Space within LCONF-Sections.\n\n\nRestriction: FIRST none white character of a line\n\n\nSome first none white character of a line are \nreserved\n as special purpose \nIdentifiers\n. Any of them are permitted\nin the middle or end of a line.\n\n\n\n\n- minus\n reserved only for all kind of \nLists-Identifier\n\n\n. dot\n reserved only for \nSingle-Block-Identifier\n\n\n* asterisk\n reserved only for \nRepeated-Block-Identifier\n\n\n# number sign\n reserved only for \nComment-Line-Identifier\n\n\n\n\nRestriction: LAST character of a line\n\n\n\n\n\n\nKey-Value-List-Identifier\n lines may \nNOT end\n with a \npipe sign (vertical bar)\n \n|\n\n\n\n\n\n\nList-Of-Tuples-Identifier\n lines \nMUST end\n with a \npipe sign (vertical bar)\n \n|\n\n\nList-Of-Tuples-Identifier can not contain any \npipe sign (vertical bar)\n except for the purpose of separating\n\nColumn-Names\n.\n\n\nList-Of-Tuples must contain as value tuples (row lines) with the same number of items as column-names specified.\n(empty items are allowed)\n\n\n\n\n\n\nRestriction: Comment Lines indentation\n\n\n#\n Comment lines within a \nLCONF-Section\n are required to have the indentation of the next none empty line.\n\n\nRestriction: Unique names\n\n\nLCONF requires that some of the Key-Names are unique.\n\n\n\n\n\n\nall \nMain Keys\n (keys without any indentation) must be unique\n\n\n\n\n\n\nwithin a \nList-Of-Tuples\n all Column-Names must be unique\n\n\n\n\n\n\nwithing a \nSingle-Block\n all direct keys (keys with one additional indentation level) must be unique\n\n\n\n\n\n\nwithin a \nRepeated-Block\n all direct keys (keys with one additional indentation level - \nBlock-Names\n) must be unique\n\n\n\n\n\n\nwithin each \nNamed-Block\n of a \nRepeated-Block\n all direct keys (keys with one additional indentation level) must be\n  unique\n\n\n\n\n\n\n4. LCONF-Default-Template-Structure\n\n\nLCONF \nrequires\n a parser/emitter to implement for any LCONF-Section a complete structure with default values. Such \nLCONF-Default-Template-Structure\n implementation may differ from programming language and parser/emitter but there are\nsome common requirements outlined below.\n\n\n4.1 LCONF-Section Key Order\n\n\nLCONF-Structure is ordered so that emitting of the same LCONF-Document will result always in an identical\nrepresentation. The order is always based on the implemented \nLCONF-Default-Template-Structure\n and not on the\n\nLCONF-Section text\n.\n\n\nException:\n\n\n\n\n\n\nThe order of \nBlock-Names\n of Repeated-Blocks will always be as as in the \nLCONF-Section text\n because these are not\n    previously known.\n\n\n\n\n\n\nThe order of \nLists items\n will always be as in the \nLCONF-Section text\n because these are not previously known.\n\n\n\n\n\n\n4.2 Default-Comment/Empty Lines\n\n\nLCONF-Default-Template-Structure\n can implement \nDefault-Comment/Empty Lines\n which can be optionally emitted.\n\n\nRestrictions: Default-Comment/Empty Lines\n\n\n\n\n\n\nbefore \nBlock-Names\n (dummy blk) there may be no \nDefault-Comment/Empty Lines\n within the code of the\n  \nLCONF-Default-Template-Structure\n.\n\n\n\n\n\n\nwithin multi-line \nLists\n \nKey-Value-Lists\n or \nList-Of-Tuples\n there may be no \nDefault-Comment/Empty Lines\n between\n  default List-Items within the code of the \nLCONF-Default-Template-Structure\n.\n\n\n\n\n\n\n4.3 Default Values\n\n\nLCONF is based on the idea of a predefined \nLCONF-Default-Template-Structure\n which must fully implement any\nLCONF-Section.\n\n\n\n\nThis gives it order, default values and one knows what to expect.\n\n\n\n\nThis helps to emit/dump in proper order based on the implemented structure.\n\n\n\n\ninclusive any \nDefault-Comment/Empty Lines\n\n\nAny LCONF library \nmust\n implement an option to emit/dump any \nRepeated-Block\n with an optional 'Dummy-Block'\n    with its default values.\n\n\n\n\n\n\n\n\nOnly a few things are not pre-known:\n\n\n\n\nAny LCONF-Section set values.\n\n\nThe number of items in lists.\n\n\n\n\nThe number of Block-Names in \nRepeated-Blocks\n.\n\n\n\n\n\n\nFor special purposes \nLCONF-Template-Default-Structure\n Repeated-Blocks implementation can optional predefine\n    some limitations: NUMBER_MIN_REQUIRED_BLOCKS, NUMBER_MAX_ALLOWED_BLOCKS\n\n\n\n\n\n\n\n\n\n\nBecause all structures must be previously implemented within the code any library which implements \nLCONF - The light\n    and simple readable data serialization format\n should give some thoughts as how do write such \nLCONF-Template-Default-Structure\n as easily as possible.\n\n\n\n\n\n\nParsing a LCONF-Section (text/file) will just overwrite any default values.\n\n\nSo the simplest LCONF-Section is only a START/END TAG:\n  which will be parsed to all implemented defaults as nothing gets overwritten.\n\n\nNOTE: There won't be any Repeated-Blocks because there are no default Block-Names set.\n\n\n\n\n\n\n4.4 Value Transformation\n\n\nBy design LCONF only supports \nstring\n types for data values.\nHowever \nLCONF-Libraries\n can (and should, where appropriate) implement an easy way for value transformation using\ncustomary hook functions or some other ways to achieve such depending on the library language.",
            "title": "LCONF-Standard"
        },
        {
            "location": "/LCONF-Standard/#the-official-lconf-standard",
            "text": "Unfinished Version 8 (20150808)   The source of the documentation was rewritten in markdown format.  In the documentation  Key-Value-Mappings  are renamed to  Single-Blocks .  Breaking changes:  The  LCONF-Section  indentation level was previously exact 3 spaces per level. This new version of the\n    LCONF-Standard allows that LCONF-Section specify there own number of spaces used per indentation level.\n    For this reason the LCONF-Section start line format changed adding the indentation space number used for the\n    section.  Key :: Value-Lists : leading or ending whitespace of comma separated values are now required to be stripped.",
            "title": "The Official LCONF-Standard"
        },
        {
            "location": "/LCONF-Standard/#copyrights-licenses",
            "text": "The  LCONF-Standard documentation  and associated documentation files\n(the \"DOCUMENTATION\") is licensed under the following terms:   Copyright (c) 2014, 2015:  peter1000    https://github.com/peter1000 . \nAll rights reserved.  The DOCUMENTATION may be freely copied, published and distributed to\nothers, provided that the above copyright notice and this Copyright\nLicense are included on all such copies or substantial portions of the\nDOCUMENTATION.  However, the content of this DOCUMENTATION itself may not be modified\nin any way, including by removing the copyright notice, except as\nrequired to translate it into languages other than English or into a\ndifferent format.\nIn the event of discrepancies between a translated version and the\nofficial English version, the official English version shall govern.  THIS DOCUMENTATION AND THE INFORMATION CONTAINED HEREIN IS PROVIDED\n\"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING\nBUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS\nOR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE DOCUMENTATION OR THE\nUSE OF THE INFORMATION HEREIN.",
            "title": "Copyrights &amp; Licenses"
        },
        {
            "location": "/LCONF-Standard/#1-introduction",
            "text": "LCONF  The light and simple readable data serialization format for dynamic configurations and data exchange.  It is a data serialization format designed  with special emphasis on being human-friendly  and works well with many\nmodern programming languages. This is a complete specification of the information needed to develop applications for\nprocessing LCONF.  LCONF was specifically designed to be useful to people working with program configuration and configuration files as\nwell as for other common use cases such as: data exchange, interprocess messaging, log files, cross-language data\nsharing.   It uses  Unicode printable characters , containing the data itself and  Indentation  to provide structure in\ncombination with very few  Ascii characters  which provide structural information.\nThis excellent combination allows the data to show itself in a human-friendly, easily readable format.",
            "title": "1. Introduction"
        },
        {
            "location": "/LCONF-Standard/#11-design-goals",
            "text": "The design goals for LCONF are, in no priority:   LCONF is easily writeable and readable by humans.  LCONF has minmal but strict structure.  LCONF allows optional  Comment lines  which are not part of the actual data.  LCONF was designed from the start to expect a predefined known structure with implemented default data.",
            "title": "1.1. Design Goals"
        },
        {
            "location": "/LCONF-Standard/#12-relation-to-other-data-serialization-formats",
            "text": "LCONF builds upon some concepts from  JSON ,  RSON , RSONLITE ,  INI , and YAML  but has also a few destinct features.  In many situations  LCONF  is a suitable replacement for any of the others mentioned above.",
            "title": "1.2. Relation to other data serialization formats"
        },
        {
            "location": "/LCONF-Standard/#13-design-overview",
            "text": "",
            "title": "1.3. Design Overview"
        },
        {
            "location": "/LCONF-Standard/#default-values",
            "text": "A major difference in design to many other data serialization formats is that LCONF was designed from the start to\nexpect a predefined known structure with implemented default data.  Many programs which parse human written data input have to account that some parts of the input may be optional and\nprovide some means of checking for such and in some cases default values must be set.  LCONF takes this as the base of its design  and  requires  a parser/emitter to implement for any LCONF-Section a\ncomplete structure with default values. ( LCONF-Default-Template-Structure )  LCONF parsed data only overwrite the defaults.",
            "title": "DEFAULT VALUES"
        },
        {
            "location": "/LCONF-Standard/#readability",
            "text": "To help to be easily writeable and readable by humans LCONF supports:   Named-Sections: which helps to identify separate parts.  Empty Lines: which are skipped but help to maintain readability.  Default Comment Lines: which are not part of the data but can be optional emitted.  Indentation: is used to visualize some of the structure od a LCONF-Document.",
            "title": "READABILITY"
        },
        {
            "location": "/LCONF-Standard/#named-sections",
            "text": "Named-Sections allow for extended text/info/explanations before or after a  LCONF-Section  without the need of\nComment-TAGS.  Multiple LCONF-Sections can be within one  LCONF-Document .",
            "title": "NAMED-SECTIONS"
        },
        {
            "location": "/LCONF-Standard/#two-structures-which-hold-data",
            "text": "Key :: Value Pairs : Associates a key with a data value.   Lists : there are three sub types of lists:   Key :: Value-Lists :  single-line  lists which associates a key with a list of data values.  Key-Value-Lists :  multi-line  lists which associates a key with a list of data values.  List-Of-Tuples :  multi-line  lists which associates a key with Column-Names to a list of column data values.\n  This lends itself especially well to data similar to multi-dimensional lists or tables e.g. csv data.",
            "title": "TWO STRUCTURES WHICH HOLD DATA"
        },
        {
            "location": "/LCONF-Standard/#two-collection-structures",
            "text": "Single-Blocks : are a collections of any of the four main structure types. (Key :: Value Pairs, Lists, Single-Blocks\n    and Repeated-Blocks)  Repeated-Blocks : are similar to Single-Blocks but additionally allow the configuration of multiple such blocks\n    within a LCONF-Section.",
            "title": "TWO COLLECTION STRUCTURES"
        },
        {
            "location": "/LCONF-Standard/#order",
            "text": "LCONF-Structure is ordered so that emitting of the same LCONF-Document will result always in an identical\nrepresentation. The order is based on the implemented  LCONF-Default-Template-Structure .",
            "title": "ORDER"
        },
        {
            "location": "/LCONF-Standard/#2-lconf-standard-specification",
            "text": "",
            "title": "2. LCONF-Standard Specification"
        },
        {
            "location": "/LCONF-Standard/#21-key-value-separator",
            "text": "\" :: \"  ( one space, double colons, one space ) is used as a  Key-Value-Separator .",
            "title": "2.1 Key-Value-Separator"
        },
        {
            "location": "/LCONF-Standard/#22-trailing-spaces",
            "text": "LCONF does not allow any  Trailing Space  within a LCONF-Section.",
            "title": "2.2 Trailing Spaces"
        },
        {
            "location": "/LCONF-Standard/#23-lconfs-native-data-type",
            "text": "Unlik JSON's basic types which are: strings, numbers, booleans, object, arrays, and null LCONF  has only one native\ntype:  strings .  String values are never quoted or escaped.  See also later the part of: Value Transformation.",
            "title": "2.3 LCONF's Native Data Type"
        },
        {
            "location": "/LCONF-Standard/#24-indentation",
            "text": "LCONF allows only spaces to be used as indentation. The number of spaces used per indentation level is set within\nthe LCONF-Section opening line.  The example below would specify that 4 spaces are used per intentation level within the LCONF-Section named  Example  ___SECTION :: 4 :: Example\n___END",
            "title": "2.4 Indentation"
        },
        {
            "location": "/LCONF-Standard/#25-named-sections",
            "text": "LCONF-Documents can contain multiple named LCONF-Sections. A LCONF-Section has a clear defined Start-TAGS and End-TAGS.\nEverything outside of these is considered  additional text .  WARNING:  LCONF-Section Start/End TAGS are forbidden in any form except for the defined purpose.",
            "title": "2.5 Named-Sections"
        },
        {
            "location": "/LCONF-Standard/#section-start-tag",
            "text": "\"___SECTION\"  ( three underlines, capital SECTION )  This is followed by a  Key-Value-Separator  and the number of spaces used per indentation level followed\nby a second  Key-Value-Separator  and the section name.  The  LCONF-Section-Start-TAG  must always be without any indentation.  ___SECTION :: 4 :: the name can also contain spaces or unicode",
            "title": "Section Start TAG"
        },
        {
            "location": "/LCONF-Standard/#section-end-tag",
            "text": "\"___END\"  ( three underlines, capital END )  The  LCONF-Section-End-TAG  must always be without any indentation.  The most basic valid LCONF-Section is:  ___SECTION :: 4 :: Example\n___END",
            "title": "Section End TAG"
        },
        {
            "location": "/LCONF-Standard/#26-comment-lines",
            "text": "\"#\"  ( one number sign ) is used as  Comment-Line-Identifier .  If the first none white character in a LCONF-Section line is  #  the line is considered a Comment-Line.  Comment-Lines  must  have the indentation level of the following line (disregarding empty lines).\nComment-Lines within a LCONF-Section are always skipped when the  LCONF-Section  is parsed.  ___SECTION :: 4 :: Example\n# Comment-Line more info\n- Names\n    Tim\n    Sandra\n    # Comment-Line must have the indentation level of the following line\n    Max\n    Frank\n___END  NOTE:  Default  Comment-Lines and Default-Empty-Lines  which are implemented in the LCONF-Default-Template-Structure  can be optionally emitted.",
            "title": "2.6 Comment-Lines"
        },
        {
            "location": "/LCONF-Standard/#27-two-structures-which-hold-data",
            "text": "",
            "title": "2.7 Two Structures Which Hold Data"
        },
        {
            "location": "/LCONF-Standard/#key-value-pairs",
            "text": "\"Key-Name :: Value\"  ( one space, double colons, one space ) is used as a  Key-Value-Separator .  Exception:  for  Empty Values  the last space is skipped so that there is no trailing space.  ___SECTION :: 4 :: Example\nColor :: Blue\nFONT :: Liberation Mono\n# Comment below is an Empty Value with no trailing space.\nMyEmptyKeyValuePair ::\n___END  Key :: Value Pairs  are always  single-line  items where the value is everything after the  Key-Value-Separator \n which and is always interpreted as a  single string .",
            "title": "Key :: Value Pairs"
        },
        {
            "location": "/LCONF-Standard/#lists",
            "text": "\"- \"  ( minus, one space ) is used as  List-Identifier  for all  three sub types of lists :  \"- List-Identifier Name\"  Example of all tree LCONF-List types.  ___SECTION :: 4 :: SectionName\n\n# Key :: Value-List: a single-line list\n- Names :: Tim,Sandra,Max\n\n# Key-Value-List: a multi-line list with indentation\n- Names\n    Tim\n    Sandra\n    Max\n\n# List-Of-Tuples: a multi-line list with indentation\n- Colors RGB |Color Name|Red|Green|Blue|\n    forestgreen,          34,  139,  34\n    brick,               156,  102,  31\n___END",
            "title": "Lists:"
        },
        {
            "location": "/LCONF-Standard/#key-value-lists",
            "text": "These are ordered collections of items: a  single-line  list which associates a key with a list of data values which\nare separated by comma.  Uses a  List-Identifier  with a List-Name followed by a  Key-Value-Separator  and the values are separated by \",\"  ( comma ).  IMPORTAND: leading or ending whitespace of comma separated values are stripped when a LCONF-Section is parsed.  Each List-Item is always interpreted as a  single string . This implies that List-Items can not be any of the four main\nstructure types. (Key :: Value Pairs, Lists, Single-Blocks and Repeated-Blocks)  Exception:  for  Empty Key :: Value-Lists  the last space is skipped so that there is no trailing space.  ___SECTION :: 4 :: Example\n- Colors :: Black,White,Blue,Red,Green\n# Comment below is an empty Empty Key :: Value-List with no trailing space.\n- MyEmptyList ::\n___END",
            "title": "Key :: Value-Lists"
        },
        {
            "location": "/LCONF-Standard/#key-value-lists_1",
            "text": "These are ordered collections of items: a  multi-line list  which associates a key with a list of data values.\nValues are written on separate lines (List-Items) and use one indentation level based on the List-Identifier line.  Basically the same as  Key :: Value-List  just uses a different notation for readability and is mostly useful for\nlonger lists or when the items are long e.g. whole sentences.  Uses a  List-Identifier  with a List-Name and any value is places on a new line with indentation.  Each List-Item is always interpreted as a  single string . This implies that List-Items can not be any of the four main\nstructure types. (Key :: Value Pairs, Lists, Single-Blocks and Repeated-Blocks)  Exception:  for  Empty Key-Value-Lists  there is no new value line.  ___SECTION :: 4 :: Example\n- Names\n    Tim\n    Sandra\n    Max\n    Frank\n# Comment below is an empty Empty Key-Value-Lists.\n- MyEmptyList\n___END  TIP: eventhough lists of lists are not supported one could mimice such by using for example a LCONF Key-Value-List\nand have as value comma separated lines which are later further proccessed.  ___SECTION :: 4 :: SectionName\n- Numers\n    534,45\n    0,1,2,3\n    66\n    12,4568,1,3,99,465,12\n___END  The List-Item:  534,45  or  0,1,2,3  etc. are just normal string lines (item lines of an:  Key-Value-List )\ne.g. one could use later a transformation function splitting each value line by comma.  NOTE: many of such caes might be better solved by using a List-Of-Tuples.",
            "title": "Key-Value-Lists"
        },
        {
            "location": "/LCONF-Standard/#list-of-tuples",
            "text": "These are ordered collections of items: a  multi-line  list which associates a key with multiple Column-Names to a\nlist of multiple column data values. This lends itself especially well to data similar to multi-dimensional lists or\ntables e.g. csv data.  Uses a  List-Identifier  with a List-Name followed by  one space  and  unique Column-Names  which are embraced and\nseparated by  \"|\"   pipe sign (vertical bar) .  List-Of-Tuples items value lines are written on separate lines (List-Items - rows) and use one indentation level\nbased on the List-Identifier lin. Each lines values are separated by  \",\"   comma .  IMPORTANT: spaces around Column-Names and values are stripped which helps to write proper columns.  Exception:  for  Empty List-Of-Tuples  there is no new value line but the Column-Names are still required.  ___SECTION :: SectionName\n# Comment: List-Name is  Colors RGB \n#          Columns are:  Color Name ,  Red ,  Green ,  Blue \n- Colors RGB |Color Name| Red| Green| Blue|\n    forestgreen,           34,   139,   34\n    brick,                156,   102,   31\n# Comment: below is an empty Empty List-Of-Tuples:\n#          List-Name is  MyEmptyListOfTuples \n#          Columns are:  X ,  Y ,  Z \n - MyEmptyListOfTuples |X|Y|Z|\n ___END  List-Of-Tuples can have empty (missing) values:  Empty/Missing Values  are returned as empty strings or if defined per\nColumn-Replacement-Values. Any  Replacement-Values  must be implemented in the  LCONF-Default-Template-Structure .  Example of a LCONF-List-Of-Tuples with  Empty/Missing Values  which will be returned as empty strings or with a\ndefined per column  Replacement-Value .  ___SECTION :: SectionName\n- ExcelTable |X|Y|Z|\n    # COMMENT: the 2. item is empty or missing\n    value1,       , value3\n    value1, value2, value3\n    # COMMENT: all items are empty or missing: the indentation level must be kept\n    ,             ,\n    # COMMENT: spaces are not important\n    ,,\n___END",
            "title": "List-Of-Tuples"
        },
        {
            "location": "/LCONF-Standard/#28-two-collection-structures",
            "text": "",
            "title": "2.8 Two Collection Structures"
        },
        {
            "location": "/LCONF-Standard/#single-blocks",
            "text": "\". \"  ( dot, one space )  is used as  Single-Block-Identifier :  \". Single-Block-Identifier Name\"  These are a collections of any of the four main structure types. (Key :: Value Pairs, Lists, Single and\nRepeated-Blocks)  Single-Block items use  one  additional indentation level.  An  Empty Single-Block-Identifier  line is permitted which will use all default values as implemented by a LCONF-Template-Default-Structure . It is basically the same as if one does not define it at all.  In some cases this might be useful: e.g. if one wants previous comment lines.  ___SECTION :: SectionName\n. Single-Block whatever name\n    single_block_item1_key :: single_block_item1_value\n    - single_block_item2_key list\n        my List-Item 1\n    # Comment: Blocks can also have other (nested) Blocks\n    . inner_single_block_item3_key\n        inner_single_block_item1_key :: inner_single_block_item1_value\n# Comment: below a permitted empty `Single-Block-Identifier` which will use all default values\n. Single-Block 2\n___END",
            "title": "Single-Blocks"
        },
        {
            "location": "/LCONF-Standard/#repeated-blocks",
            "text": "\"* \"  asterisk, one space  is used as  Repeated-Block-Identifier :  \"* Repeated-Block-Identifier Name\"  These are similar to the Single-Blocks but additionally allow the configuration of multiple such blocks within a\nLCONF-Section.  A unique  Block-Name  which uses  one  additional indentation level defines a new Block and is written on a separate\nline.  Block-Name items use  another  additional indentation level.  An  Empty Repeated-Block-Identifier  line is permitted but without a  Block-Name  it does nothing.\nIt is basically the same as if one does not define it at all.  In some cases this might be useful: e.g. if one wants previous comment lines.  ___SECTION :: SectionName\n* Color_BLK_Identifier\n    Sky Blue_Blk-Name Theme\n        blk_item_red :: 135\n        blk_item_green :: 206\n        blk_item_blue :: 235\n    # Second Block-Name is an empty Block which uses all default values\n    Red Theme\n# Comment: below a permitted empty `Repeated-Block-Identifier` line which will do nothing because\n# for Repeated-Blocks the main Structure item is a unique Block-Name.\n* Color_BLK_Identifier 2\n___END  NOTE: to get the  Default-Values  for a whole Block: only define the Block-Identifier and the Block-Name without any\nitems.",
            "title": "Repeated-Blocks"
        },
        {
            "location": "/LCONF-Standard/#block-names",
            "text": "Each Block of a  Repeated-Block-Structure  is named:  Block-Names  use  one  additional indentation level based on\nthe  Repeated-Block-Identifier  line.  Empty Block-Names : if a  Block-Name  is defined without any items at all it is still valid using all defaults for\nsuch Block from the  LCONF-Template-Default-Structure .  Any number of Block-Names can be user defined: but this can also be limited in a  LCONF-Template-Default-Structure .\n(NUMBER_MIN_REQUIRED_BLOCKS, NUMBER_MAX_ALLOWED_BLOCKS)",
            "title": "Block-Names"
        },
        {
            "location": "/LCONF-Standard/#3-lconf-character-restrictions",
            "text": "",
            "title": "3. LCONF Character Restrictions"
        },
        {
            "location": "/LCONF-Standard/#restriction-section-startend-tag",
            "text": "Character combinations  ___SECTION ,  ___END  are forbidden in any form except for the defined purpose.\nEach LCONF-Section Start-TAG must be closed by an corresponding LCONF-Section End-TAG.  LCONF does not allow nested Sections.",
            "title": "Restriction: Section Start/End Tag"
        },
        {
            "location": "/LCONF-Standard/#restriction-trailing-spaces",
            "text": "LCONF does not allow any Trailing Space within LCONF-Sections.",
            "title": "Restriction: Trailing Spaces"
        },
        {
            "location": "/LCONF-Standard/#restriction-first-none-white-character-of-a-line",
            "text": "Some first none white character of a line are  reserved  as special purpose  Identifiers . Any of them are permitted\nin the middle or end of a line.   - minus  reserved only for all kind of  Lists-Identifier  . dot  reserved only for  Single-Block-Identifier  * asterisk  reserved only for  Repeated-Block-Identifier  # number sign  reserved only for  Comment-Line-Identifier",
            "title": "Restriction: FIRST none white character of a line"
        },
        {
            "location": "/LCONF-Standard/#restriction-last-character-of-a-line",
            "text": "Key-Value-List-Identifier  lines may  NOT end  with a  pipe sign (vertical bar)   |    List-Of-Tuples-Identifier  lines  MUST end  with a  pipe sign (vertical bar)   |  List-Of-Tuples-Identifier can not contain any  pipe sign (vertical bar)  except for the purpose of separating Column-Names .  List-Of-Tuples must contain as value tuples (row lines) with the same number of items as column-names specified.\n(empty items are allowed)",
            "title": "Restriction: LAST character of a line"
        },
        {
            "location": "/LCONF-Standard/#restriction-comment-lines-indentation",
            "text": "#  Comment lines within a  LCONF-Section  are required to have the indentation of the next none empty line.",
            "title": "Restriction: Comment Lines indentation"
        },
        {
            "location": "/LCONF-Standard/#restriction-unique-names",
            "text": "LCONF requires that some of the Key-Names are unique.    all  Main Keys  (keys without any indentation) must be unique    within a  List-Of-Tuples  all Column-Names must be unique    withing a  Single-Block  all direct keys (keys with one additional indentation level) must be unique    within a  Repeated-Block  all direct keys (keys with one additional indentation level -  Block-Names ) must be unique    within each  Named-Block  of a  Repeated-Block  all direct keys (keys with one additional indentation level) must be\n  unique",
            "title": "Restriction: Unique names"
        },
        {
            "location": "/LCONF-Standard/#4-lconf-default-template-structure",
            "text": "LCONF  requires  a parser/emitter to implement for any LCONF-Section a complete structure with default values. Such  LCONF-Default-Template-Structure  implementation may differ from programming language and parser/emitter but there are\nsome common requirements outlined below.",
            "title": "4. LCONF-Default-Template-Structure"
        },
        {
            "location": "/LCONF-Standard/#41-lconf-section-key-order",
            "text": "LCONF-Structure is ordered so that emitting of the same LCONF-Document will result always in an identical\nrepresentation. The order is always based on the implemented  LCONF-Default-Template-Structure  and not on the LCONF-Section text .  Exception:    The order of  Block-Names  of Repeated-Blocks will always be as as in the  LCONF-Section text  because these are not\n    previously known.    The order of  Lists items  will always be as in the  LCONF-Section text  because these are not previously known.",
            "title": "4.1 LCONF-Section Key Order"
        },
        {
            "location": "/LCONF-Standard/#42-default-commentempty-lines",
            "text": "LCONF-Default-Template-Structure  can implement  Default-Comment/Empty Lines  which can be optionally emitted.  Restrictions: Default-Comment/Empty Lines    before  Block-Names  (dummy blk) there may be no  Default-Comment/Empty Lines  within the code of the\n   LCONF-Default-Template-Structure .    within multi-line  Lists   Key-Value-Lists  or  List-Of-Tuples  there may be no  Default-Comment/Empty Lines  between\n  default List-Items within the code of the  LCONF-Default-Template-Structure .",
            "title": "4.2 Default-Comment/Empty Lines"
        },
        {
            "location": "/LCONF-Standard/#43-default-values",
            "text": "LCONF is based on the idea of a predefined  LCONF-Default-Template-Structure  which must fully implement any\nLCONF-Section.   This gives it order, default values and one knows what to expect.   This helps to emit/dump in proper order based on the implemented structure.   inclusive any  Default-Comment/Empty Lines  Any LCONF library  must  implement an option to emit/dump any  Repeated-Block  with an optional 'Dummy-Block'\n    with its default values.     Only a few things are not pre-known:   Any LCONF-Section set values.  The number of items in lists.   The number of Block-Names in  Repeated-Blocks .    For special purposes  LCONF-Template-Default-Structure  Repeated-Blocks implementation can optional predefine\n    some limitations: NUMBER_MIN_REQUIRED_BLOCKS, NUMBER_MAX_ALLOWED_BLOCKS      Because all structures must be previously implemented within the code any library which implements  LCONF - The light\n    and simple readable data serialization format  should give some thoughts as how do write such  LCONF-Template-Default-Structure  as easily as possible.    Parsing a LCONF-Section (text/file) will just overwrite any default values.  So the simplest LCONF-Section is only a START/END TAG:\n  which will be parsed to all implemented defaults as nothing gets overwritten.  NOTE: There won't be any Repeated-Blocks because there are no default Block-Names set.",
            "title": "4.3 Default Values"
        },
        {
            "location": "/LCONF-Standard/#44-value-transformation",
            "text": "By design LCONF only supports  string  types for data values.\nHowever  LCONF-Libraries  can (and should, where appropriate) implement an easy way for value transformation using\ncustomary hook functions or some other ways to achieve such depending on the library language.",
            "title": "4.4 Value Transformation"
        },
        {
            "location": "/LICENSE/",
            "text": "Copyrights \n Licenses\n\n\nThe \nLCONF-Standard documentation\n and associated documentation files \n(the \"DOCUMENTATION\") is licensed under the following terms:\n\n\n\n\nCopyright (c) 2014 - 2015: \npeter1000\n  \nhttps://github.com/peter1000\n.\n\nAll rights reserved.\n\n\nThe DOCUMENTATION may be freely copied, published and distributed to \nothers, provided that the above copyright notice and this Copyright \nLicense are included on all such copies or substantial portions of the \nDOCUMENTATION.\n\n\nHowever, the content of this DOCUMENTATION itself may not be modified \nin any way, including by removing the copyright notice, except as \nrequired to translate it into languages other than English or into a \ndifferent format.\nIn the event of discrepancies between a translated version and the \nofficial English version, the official English version shall govern.\n\n\nTHIS DOCUMENTATION AND THE INFORMATION CONTAINED HEREIN IS PROVIDED \n\"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING \nBUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS \nOR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, \nARISING FROM, OUT OF OR IN CONNECTION WITH THE DOCUMENTATION OR THE \nUSE OF THE INFORMATION HEREIN.",
            "title": "License"
        },
        {
            "location": "/LICENSE/#copyrights-licenses",
            "text": "The  LCONF-Standard documentation  and associated documentation files \n(the \"DOCUMENTATION\") is licensed under the following terms:   Copyright (c) 2014 - 2015:  peter1000    https://github.com/peter1000 . \nAll rights reserved.  The DOCUMENTATION may be freely copied, published and distributed to \nothers, provided that the above copyright notice and this Copyright \nLicense are included on all such copies or substantial portions of the \nDOCUMENTATION.  However, the content of this DOCUMENTATION itself may not be modified \nin any way, including by removing the copyright notice, except as \nrequired to translate it into languages other than English or into a \ndifferent format.\nIn the event of discrepancies between a translated version and the \nofficial English version, the official English version shall govern.  THIS DOCUMENTATION AND THE INFORMATION CONTAINED HEREIN IS PROVIDED \n\"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING \nBUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A \nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS \nOR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, \nARISING FROM, OUT OF OR IN CONNECTION WITH THE DOCUMENTATION OR THE \nUSE OF THE INFORMATION HEREIN.",
            "title": "Copyrights &amp; Licenses"
        },
        {
            "location": "/README/",
            "text": "LCONF-Standard\n\n\nThe official LCONF data serialization format Standard. \n\n\nCopyright \u00a9 2014 - 2015 \npeter1000\n \nhttps://github.com/peter1000\n \n\nAll rights reserved.\n\n\nWeb site\n\n\n\n\nhttp://lconf.github.io/LCONF-Standard/\n - The \nLCONF-Standard\n web site\n\n\nhttps://github.com/LCONF/LCONF-Standard/\n - The \nLCONF-Standard\n github site",
            "title": "README"
        },
        {
            "location": "/README/#lconf-standard",
            "text": "The official LCONF data serialization format Standard.   Copyright \u00a9 2014 - 2015  peter1000   https://github.com/peter1000   \nAll rights reserved.",
            "title": "LCONF-Standard"
        },
        {
            "location": "/README/#web-site",
            "text": "http://lconf.github.io/LCONF-Standard/  - The  LCONF-Standard  web site  https://github.com/LCONF/LCONF-Standard/  - The  LCONF-Standard  github site",
            "title": "Web site"
        }
    ]
}